#!/usr/bin/env node

const { Command } = require('commander');
const chalk = require('chalk');
const ora = require('ora');
const inquirer = require('inquirer');
const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

const program = new Command();

function createGitignoreEntry() {
  const gitignorePath = './.gitignore';
  const entries = [
    '',
    '# Claude Analysis Files',
    'analysis/',
    '.claude-context.json',
    ''
  ].join('\n');

  if (fs.existsSync(gitignorePath)) {
    const content = fs.readFileSync(gitignorePath, 'utf8');
    if (!content.includes('analysis/')) {
      fs.appendFileSync(gitignorePath, entries);
      console.log(chalk.green('✅ Added analysis/ to .gitignore'));
    }
  } else {
    fs.writeFileSync(gitignorePath, entries);
    console.log(chalk.green('✅ Created .gitignore with Claude entries'));
  }
}

function createClaudeRules() {
  const rulesContent = `# Claude Development Rules

## Protocol
- Always follow C.I.D.E.R. methodology for issues
- Use R.A.D.A.R. for repository analysis
- Document all changes in specs/

## Quick Commands
- Analysis: \`claude-radar analyze\`
- Quick setup: \`claude-radar quick\`
- Generate issue: \`claude-cider generate EPIC "description"\`
- Work on issue: \`claude-cider work 123 frontend\`

## Generated by claude-dev-radar package
`;

  fs.writeFileSync('./.claude-rules.md', rulesContent);
  console.log(chalk.green('✅ Created .claude-rules.md'));
}

async function setupProject() {
  console.log(chalk.blue.bold('🚀 CLAUDE DEV SETUP'));
  console.log(chalk.gray('Setting up Claude automation tools for this project\n'));

  const answers = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'runAnalysis',
      message: 'Run initial R.A.D.A.R. analysis?',
      default: true
    },
    {
      type: 'list',
      name: 'analysisType',
      message: 'Analysis type:',
      choices: [
        { name: '⚡ Quick (5 min) - Basic overview', value: 'quick' },
        { name: '🎯 Full (15 min) - Complete analysis', value: 'full' }
      ],
      when: (answers) => answers.runAnalysis
    },
    {
      type: 'confirm',
      name: 'setupGitignore',
      message: 'Add analysis/ folder to .gitignore?',
      default: true
    },
    {
      type: 'confirm',
      name: 'createRules',
      message: 'Create .claude-rules.md file?',
      default: true
    }
  ]);

  // Setup gitignore
  if (answers.setupGitignore) {
    createGitignoreEntry();
  }

  // Create rules file
  if (answers.createRules) {
    createClaudeRules();
  }

  // Initialize Git if needed
  if (!fs.existsSync('./.git')) {
    const spinner = ora('Initializing Git repository...').start();
    try {
      execSync('git init', { stdio: 'pipe' });
      execSync('git add .', { stdio: 'pipe' });
      execSync('git commit -m "Initial commit with Claude setup"', { stdio: 'pipe' });
      spinner.succeed('Git repository initialized ✅');
    } catch (error) {
      spinner.warn('Git initialization skipped (may already exist)');
    }
  }

  // Run analysis if requested
  if (answers.runAnalysis) {
    const packageDir = path.dirname(path.dirname(__filename));
    const scriptPath = path.join(packageDir, 'claude-repo-analyzer.sh');

    const spinner = ora(`Running ${answers.analysisType} analysis...`).start();

    try {
      const command = answers.analysisType === 'quick'
        ? `bash "${scriptPath}" discover && bash "${scriptPath}" report`
        : `bash "${scriptPath}" analyze`;

      execSync(command, { stdio: 'pipe', cwd: process.cwd() });
      spinner.succeed(`${answers.analysisType} analysis completed ✅`);

      // Show generated files
      if (fs.existsSync('./analysis')) {
        console.log(chalk.cyan('\n📄 Generated analysis files:'));
        const files = execSync('find ./analysis -name "*.md" | sort', { encoding: 'utf8' }).split('\n').filter(Boolean);
        files.forEach(file => console.log(chalk.green(`  ✅ ${file}`)));
      }

    } catch (error) {
      spinner.fail('Analysis failed ❌');
      console.log(chalk.yellow('💡 You can run analysis later with: claude-radar analyze'));
    }
  }

  console.log(chalk.green.bold('\n🎉 PROJECT SETUP COMPLETE!'));
  console.log(chalk.cyan('\n🚀 Next steps:'));
  console.log(chalk.white('  1. Review analysis files in analysis/ folder'));
  console.log(chalk.white('  2. Generate issues: claude-cider generate EPIC "description"'));
  console.log(chalk.white('  3. Start working: claude-cider work <issue-number> <scope>'));
  console.log(chalk.white('\n📚 Full commands: claude-radar --help, claude-cider --help'));
}

async function quickStart() {
  console.log(chalk.yellow.bold('⚡ CLAUDE QUICK START'));

  const spinner = ora('Setting up minimal configuration...').start();

  try {
    createGitignoreEntry();
    createClaudeRules();

    if (!fs.existsSync('./.git')) {
      execSync('git init', { stdio: 'pipe' });
      execSync('git add .', { stdio: 'pipe' });
      execSync('git commit -m "Initial commit"', { stdio: 'pipe' });
    }

    spinner.succeed('Quick setup completed ✅');

    console.log(chalk.green('\n⚡ Ready to go! Try:'));
    console.log(chalk.white('  claude-radar quick     # Quick analysis'));
    console.log(chalk.white('  claude-radar analyze   # Full analysis'));

  } catch (error) {
    spinner.fail('Quick setup failed ❌');
    console.error(chalk.red(error.message));
  }
}

program
  .name('claude-setup')
  .description('🚀 Setup Claude automation tools in current project')
  .version('1.0.0');

program
  .command('init')
  .description('🚀 Interactive project setup')
  .action(setupProject);

program
  .command('quick')
  .description('⚡ Quick setup with minimal configuration')
  .action(quickStart);

program
  .command('check')
  .description('🔍 Check if Claude tools are properly configured')
  .action(() => {
    console.log(chalk.blue.bold('🔍 CONFIGURATION CHECK'));

    const checks = [
      { name: 'Git repository', check: () => fs.existsSync('./.git') },
      { name: 'Claude Code installed', check: () => {
        try { execSync('claude --version', { stdio: 'pipe' }); return true; } catch { return false; }
      }},
      { name: '.gitignore configured', check: () => {
        if (!fs.existsSync('./.gitignore')) return false;
        const content = fs.readFileSync('./.gitignore', 'utf8');
        return content.includes('analysis/');
      }},
      { name: 'Claude rules file', check: () => fs.existsSync('./.claude-rules.md') },
      { name: 'Analysis folder', check: () => fs.existsSync('./analysis') }
    ];

    checks.forEach(({ name, check }) => {
      const result = check();
      console.log(result
        ? chalk.green(`✅ ${name}`)
        : chalk.red(`❌ ${name}`)
      );
    });

    const passedChecks = checks.filter(({ check }) => check()).length;
    console.log(chalk.cyan(`\n📊 Score: ${passedChecks}/${checks.length}`));

    if (passedChecks < checks.length) {
      console.log(chalk.yellow('\n💡 Run: claude-setup init'));
    } else {
      console.log(chalk.green('\n🎉 All checks passed! Ready to use Claude tools.'));
    }
  });

// Default action
program.action(() => {
  console.log(chalk.blue.bold('🚀 CLAUDE DEV SETUP'));
  console.log(chalk.gray('Choose a setup option:\n'));

  console.log(chalk.white('  claude-setup init    # Interactive setup'));
  console.log(chalk.white('  claude-setup quick   # Quick minimal setup'));
  console.log(chalk.white('  claude-setup check   # Check configuration'));
  console.log(chalk.white('\nOr run with --help for more options'));
});

program.parse();