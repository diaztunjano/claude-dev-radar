#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Animation function
animate_loading() {
    local duration=$1
    local msg=$2
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    local i=0

    while [ $i -lt $duration ]; do
        printf "\r${BLUE}%s${NC} %s" "${chars:$((i % ${#chars})):1}" "$msg"
        sleep 0.1
        i=$((i + 1))
    done
    printf "\r${GREEN}‚úÖ${NC} %s\n" "$msg"
}

# Logo
show_logo() {
    echo -e "${BLUE}"
    cat << 'EOF'
   ______ __      ___    __  ______  ____   __________    ____  ___    ____
  / ____// /     /   |  / / / / __ \/ __ \ / ____/ __ \  / __ \/   |  / __ \
 / /    / /     / /| | / / / / / / / /_/ // __/ / /_/ / / /_/ / /| | / /_/ /
/ /___ / /___  / ___ |/ /_/ / /_/ / __/  / /___/ _, _/ / _, _/ ___ |/ _, _/
\____//_____/ /_/  |_|\____/_____/_/    /_____/_/ |_| /_/ |_/_/  |_/_/ |_|

EOF
    echo -e "${NC}"
    echo -e "${CYAN}üöÄ AI-Powered Development Tools for Claude Code${NC}"
    echo -e "${GRAY}Installing R.A.D.A.R. + C.I.D.E.R. automation systems...${NC}"
    echo ""
}

# Check prerequisites
check_prerequisites() {
    echo -e "${YELLOW}üîç Checking prerequisites...${NC}"

    # Check Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js not found${NC}"
        echo -e "${YELLOW}üí° Install from: https://nodejs.org${NC}"
        exit 1
    fi

    # Check npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm not found${NC}"
        exit 1
    fi

    # Check Claude Code
    if ! command -v claude &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Claude Code not found${NC}"
        echo -e "${YELLOW}üí° Install with: curl -sSL https://claude.ai/install | sh${NC}"
        echo -e "${BLUE}ü§î Continue installation anyway? (y/N)${NC}"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    # Check Git
    if ! command -v git &> /dev/null; then
        echo -e "${RED}‚ùå Git not found${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"
    echo ""
}

# Install package globally
install_package() {
    echo -e "${BLUE}üì¶ Installing claude-dev-radar globally...${NC}"

    if npm list -g claude-dev-radar &> /dev/null; then
        echo -e "${YELLOW}üì¶ claude-dev-radar already installed, updating...${NC}"
        npm update -g claude-dev-radar
    else
        npm install -g claude-dev-radar
    fi

    animate_loading 30 "Installing CLI tools"
    echo ""
}

# Setup current project
setup_project() {
    echo -e "${PURPLE}üöÄ Setting up current project...${NC}"

    # Check if we're in a Git repository
    if [ ! -d ".git" ]; then
        echo -e "${YELLOW}üìÅ Initializing Git repository...${NC}"
        git init
        git add .
        git commit -m "Initial commit with Claude Dev R.A.D.A.R. setup" || true
    fi

    # Run claude-setup
    if command -v claude-setup &> /dev/null; then
        claude-setup quick
    else
        echo -e "${YELLOW}‚ö†Ô∏è  claude-setup command not available, manual setup...${NC}"

        # Create .gitignore entries
        if [ ! -f ".gitignore" ]; then
            echo -e "\n# Claude Analysis Files\nanalysis/\n.claude-context.json" > .gitignore
        else
            if ! grep -q "analysis/" .gitignore; then
                echo -e "\n# Claude Analysis Files\nanalysis/\n.claude-context.json" >> .gitignore
            fi
        fi

        # Create Claude rules
        cat > .claude-rules.md << 'EOF'
# Claude Development Rules

## Protocol
- Always follow C.I.D.E.R. methodology for issues
- Use R.A.D.A.R. for repository analysis
- Document all changes in specs/

## Quick Commands
- Analysis: `claude-radar analyze`
- Quick setup: `claude-radar quick`
- Generate issue: `claude-cider generate EPIC "description"`
- Work on issue: `claude-cider work 123 frontend`

## Generated by claude-dev-radar installer
EOF
    fi

    echo -e "${GREEN}‚úÖ Project setup completed${NC}"
    echo ""
}

# Run initial analysis
run_analysis() {
    echo -e "${CYAN}üîç Would you like to run initial R.A.D.A.R. analysis? (Y/n)${NC}"
    read -r response

    if [[ "$response" =~ ^[Nn]$ ]]; then
        return
    fi

    echo -e "${BLUE}üìä Choose analysis type:${NC}"
    echo -e "  ${GREEN}1)${NC} ‚ö° Quick (5 min) - Basic overview"
    echo -e "  ${GREEN}2)${NC} üéØ Full (15 min) - Complete analysis"
    echo -e "  ${GREEN}3)${NC} üö´ Skip analysis"

    read -r choice

    case $choice in
        1)
            echo -e "${YELLOW}‚ö° Running quick analysis...${NC}"
            claude-radar quick || echo -e "${YELLOW}‚ö†Ô∏è  Analysis failed, you can run it later with: claude-radar quick${NC}"
            ;;
        2)
            echo -e "${YELLOW}üéØ Running full analysis...${NC}"
            claude-radar analyze || echo -e "${YELLOW}‚ö†Ô∏è  Analysis failed, you can run it later with: claude-radar analyze${NC}"
            ;;
        *)
            echo -e "${GRAY}‚è≠Ô∏è  Skipping analysis${NC}"
            ;;
    esac

    echo ""
}

# Show success message
show_success() {
    echo -e "${GREEN}üéâ INSTALLATION COMPLETE!${NC}"
    echo ""
    echo -e "${CYAN}üöÄ Available commands:${NC}"
    echo -e "  ${WHITE}claude-radar analyze${NC}      # Full repository analysis"
    echo -e "  ${WHITE}claude-radar quick${NC}        # Quick 5-minute analysis"
    echo -e "  ${WHITE}claude-cider generate${NC}     # Generate atomic issues"
    echo -e "  ${WHITE}claude-setup init${NC}         # Setup new projects"
    echo ""
    echo -e "${CYAN}üìö Next steps:${NC}"
    if [ -d "./analysis" ]; then
        echo -e "  ${WHITE}1.${NC} Review generated analysis: ${BLUE}ls analysis/${NC}"
        echo -e "  ${WHITE}2.${NC} Check executive summary: ${BLUE}cat analysis/reports/*-executive-summary.md${NC}"
    else
        echo -e "  ${WHITE}1.${NC} Run analysis: ${BLUE}claude-radar analyze${NC}"
        echo -e "  ${WHITE}2.${NC} Generate your first issue: ${BLUE}claude-cider generate FEATURE \"description\"${NC}"
    fi
    echo -e "  ${WHITE}3.${NC} Start structured development workflow"
    echo ""
    echo -e "${PURPLE}üíé You're now equipped with AI-powered development tools!${NC}"
    echo -e "${GRAY}Documentation: https://github.com/yourusername/claude-dev-radar${NC}"
}

# Main installation flow
main() {
    show_logo
    check_prerequisites
    install_package
    setup_project
    run_analysis
    show_success
}

# Error handling
trap 'echo -e "\n${RED}‚ùå Installation failed. Check the error above.${NC}"; exit 1' ERR

# Run main function
main